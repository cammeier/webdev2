using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace StudentManagement
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {

        private bool isUpdateMode = false;
        private Undergraduate selectedUndergraduate;
        private Graduate selectedGraduate;
        private Course selectedCourse;

        private bool isUpdateCoursesMode = false;


        public MainWindow()
        {
            InitializeComponent();
        }
        private void AddStudentButton_Click(object sender, RoutedEventArgs e)
        {
            if (isUpdateMode)
            {
                UpdateStudent();
            }
            else
            {
                AddStudent();
            }
        }

        
        private void AddStudent()
        {

            // Get the text from the TextBoxes
            string firstName = FirstNameTextBox.Text;
            string lastName = LastNameTextBox.Text;
            string studentID = StudentIDTextBox.Text;
            string ageText = AgeTextBox.Text;

            // Validate input
            if (string.IsNullOrWhiteSpace(firstName))
            {
                MessageBox.Show("First name cannot be empty.");
                return;
            }

            if (string.IsNullOrWhiteSpace(lastName))
            {
                MessageBox.Show("Last name cannot be empty.");
                return;
            }

            if (string.IsNullOrWhiteSpace(studentID))
            {
                MessageBox.Show("Student ID cannot be empty.");
                return;
            }

            if (!int.TryParse(ageText, out int age) || age < 0)
            {
                MessageBox.Show("Please enter a valid age.");
                return;
            }
            // Get the selected gender
            ComboBoxItem selectedGenderItem = (ComboBoxItem)GenderCombo.SelectedItem;
            if (selectedGenderItem == null)
            {
                MessageBox.Show("Please select a gender.");
                return;
            }
            string genderText = selectedGenderItem.Content.ToString();
            int genderInt = -1;
            if (genderText == "Male")
            {
                genderInt = 0;
            }
            else if (genderText == "Female")
            {
                genderInt = 1;
            }
            else if (genderText == "Other")
            {
                genderInt = 2;
            }



            // Get the selected level
            ComboBoxItem selectedLevelItem = (ComboBoxItem)StudentLevelBox.SelectedItem;
            string selectedLevel = selectedLevelItem.Content.ToString();

            // You can now use the selectedLevel variable as needed
            if (selectedLevel == "Undergraduate")
            {
                Undergraduate newStudent = new Undergraduate(firstName, lastName, genderInt, int.Parse(ageText), studentID);
                StudentsListBox.Items.Add(newStudent);
            }
            else if (selectedLevel == "Graduate")
            {
                Graduate newStudent = new Graduate(firstName, lastName, genderInt, int.Parse(ageText), studentID);
                StudentsListBox.Items.Add(newStudent);
            }
            else
            {
                MessageBox.Show("Please select a valid student level.");
                return;
            }

            // Clear all text boxes
            ClearStudentForm();

            SortListBoxByName(StudentsListBox);

        }
        private void ClearStudentForm()
        {
            FirstNameTextBox.Clear();
            LastNameTextBox.Clear();
            StudentIDTextBox.Clear();
            AgeTextBox.Clear();
            GenderCombo.SelectedIndex = -1;
            StudentLevelBox.SelectedIndex = -1;
        }
        private void UpdateStudent()
        {
            if (selectedUndergraduate != null)
            {
                selectedUndergraduate.FirstName = FirstNameTextBox.Text;
                selectedUndergraduate.LastName = LastNameTextBox.Text;
                selectedUndergraduate.Age = int.Parse(AgeTextBox.Text);
                selectedUndergraduate.Gender = GenderCombo.SelectedIndex;
                selectedUndergraduate.StudentID = StudentIDTextBox.Text;
            }
            else if (selectedGraduate != null)
            {
                selectedGraduate.FirstName = FirstNameTextBox.Text;
                selectedGraduate.LastName = LastNameTextBox.Text;
                selectedGraduate.Age = int.Parse(AgeTextBox.Text);
                selectedGraduate.Gender = GenderCombo.SelectedIndex;
                selectedGraduate.StudentID = StudentIDTextBox.Text;
            }

            // Clear all text boxes
            ClearStudentForm();

            // Reset the button to "Add Student" mode
            AddStudentButton.Content = "Add Student";
            isUpdateMode = false;
            selectedUndergraduate = null;
            selectedGraduate = null;

            SortListBoxByName(StudentsListBox);
        }

        private void UpdateCourse()
        {
            if (selectedCourse != null)
            {
                selectedCourse.CourseName = CourseNameTextBox.Text;
                selectedCourse.CoursePrefix = CoursePrefixTextBox.Text;
                selectedCourse.CourseNumber = int.Parse(CourseNumberTextBox.Text);
                selectedCourse.Credit = int.Parse(CreditHoursTextBox.Text);
                selectedCourse.Grade = float.Parse(GPATextBox.Text);
            }


            // Clear all text boxes
            ClearStudentForm();

            // Reset the button to "Add Student" mode
            AddCourseButton.Content = "Add Course";
            isUpdateMode = false;
            selectedCourse = null;

            SortCourses(CoursesListBox);
        }

        private void AddCourseButton_Click(object sender, RoutedEventArgs e)
        {
            if (isUpdateCoursesMode)
            {
                UpdateCourse();
            }
            else
            {
                AddCourse();
            }
        }
        private void AddCourse()
        {
            string courseName = CourseNameTextBox.Text;
            string coursePrefix = CoursePrefixTextBox.Text;
            string courseNumberText = CourseNumberTextBox.Text;
            string courseCreditsText = CreditHoursTextBox.Text;
            string courseGradeText = GPATextBox.Text;

            // Validate input
            if (string.IsNullOrWhiteSpace(courseName))
            {
                MessageBox.Show("Course name cannot be empty.");
                return;
            }

            if (string.IsNullOrWhiteSpace(coursePrefix))
            {
                MessageBox.Show("Course prefix cannot be empty.");
                return;
            }

            if (!int.TryParse(courseNumberText, out int courseNumber) || courseNumber < 0)
            {
                MessageBox.Show("Please enter a valid course number.");
                return;
            }

            if (!int.TryParse(courseCreditsText, out int courseCredits) || courseCredits < 0)
            {
                MessageBox.Show("Please enter valid credit hours.");
                return;
            }

            if (!float.TryParse(courseGradeText, out float courseGrade) || courseGrade < 0.0f || courseGrade > 4.0f)
            {
                MessageBox.Show("Please enter a valid grade (0.0 - 4.0).");
                return;
            }

            Course newCourse = new Course(courseName, coursePrefix, int.Parse(courseNumberText), float.Parse(courseGradeText), int.Parse(courseCreditsText));

            if (StudentsListBox.SelectedItem is Graduate selectedGraduate)
            {
                selectedGraduate.AddCourse(newCourse);
                CoursesListBox.Items.Add(newCourse);
            }
            else if ((StudentsListBox.SelectedItem is Undergraduate selectedUndergraduate))
            {
                selectedUndergraduate.AddCourse(newCourse);
                CoursesListBox.Items.Add(newCourse);
            }
            else
            {
                MessageBox.Show("Please select a student to add the course.");

            }

            // Clear all text boxes  
            CourseNameTextBox.Clear();
            CoursePrefixTextBox.Clear();
            CourseNumberTextBox.Clear();
            CreditHoursTextBox.Clear();
            GPATextBox.Clear();
            SortCourses(CoursesListBox);
        }


        private void StudentsListBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (StudentsListBox.SelectedItem is Undergraduate selectedUndergraduate)
            {
                // Populate the text boxes with the selected student's information
                FirstNameTextBox.Text = selectedUndergraduate.FirstName;
                LastNameTextBox.Text = selectedUndergraduate.LastName;
                AgeTextBox.Text = selectedUndergraduate.Age.ToString();
                GenderCombo.SelectedIndex = selectedUndergraduate.Gender;
                StudentLevelBox.SelectedIndex = 0;
                StudentIDTextBox.Text = selectedUndergraduate.StudentID;

                float cumGPA = 0;
                float totalCreditHours = 0;
                // Populate the courses list box with the selected student's courses
                CoursesListBox.Items.Clear();
                foreach (var course in selectedUndergraduate.courses)
                {
                    CoursesListBox.Items.Add(course);
                    totalCreditHours += course.Credit;
                    cumGPA += course.Grade * course.Credit;
                }
                AddStudentButton.Content = "Update Student";
                isUpdateMode = true;
                float test = cumGPA / totalCreditHours;

                selectedUndergraduate.Gpa = test;
                TotalGPATextBox.Text = selectedUndergraduate.Gpa.ToString("F2");



            }
            else if (StudentsListBox.SelectedItem is Graduate selectedGraduate)
            {
                // Populate the text boxes with the selected student's information
                FirstNameTextBox.Text = selectedGraduate.FirstName;
                LastNameTextBox.Text = selectedGraduate.LastName;
                AgeTextBox.Text = selectedGraduate.Age.ToString();
                GenderCombo.SelectedIndex = selectedGraduate.Gender;
                StudentLevelBox.SelectedIndex = 1;
                StudentIDTextBox.Text = selectedGraduate.StudentID;

                // Populate the courses list box with the selected student's courses
                float cumGPA = 0;
                float totalCreditHours = 0;
                CoursesListBox.Items.Clear();
                foreach (var course in selectedGraduate.courses)
                {
                    CoursesListBox.Items.Add(course);
                    totalCreditHours += course.Credit;
                    cumGPA += course.Grade * course.Credit;
                }
                AddStudentButton.Content = "Update Student";
                isUpdateMode = true;
                selectedGraduate.Gpa = cumGPA /totalCreditHours;

                TotalGPATextBox.Text = selectedGraduate.Gpa.ToString();
            }
        }

        private void CoursesListBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (CoursesListBox.SelectedItem is Course selectedCourse)
            {
                CourseNameTextBox.Text = selectedCourse.CourseName;
                CoursePrefixTextBox.Text = selectedCourse.CoursePrefix;
                CourseNumberTextBox.Text = selectedCourse.CourseNumber.ToString();
                CreditHoursTextBox.Text = selectedCourse.Credit.ToString();
                GPATextBox.Text = selectedCourse.Grade.ToString();
            }

            AddCourseButton.Content = "Update Course";
            isUpdateMode = true;

        }

        private void SortListBoxByName(ListBox listBox)
        {
            ICollectionView view = CollectionViewSource.GetDefaultView(listBox.Items);
            view.SortDescriptions.Clear();
            view.SortDescriptions.Add(
                new SortDescription(
                    nameof(Person.FirstName),
                    ListSortDirection.Ascending
                )
            );
            view.SortDescriptions.Add(
                new SortDescription(
                    nameof(Person.LastName),
                    ListSortDirection.Ascending
                )
            );
            view.Refresh();
        }

    

    private void SortCourses(ListBox listBox)
        {
            ICollectionView view = CollectionViewSource.GetDefaultView(listBox.Items);
            view.SortDescriptions.Clear();

            view.SortDescriptions.Clear();
            view.SortDescriptions.Add(
                new SortDescription(
                     nameof(Course.CoursePrefix), 
                     ListSortDirection.Ascending
                )
            );
            view.SortDescriptions.Add(
                new SortDescription(
                    nameof(Course.CourseNumber), 
                    ListSortDirection.Ascending
                )
            );
            view.Refresh();
        }

    }
}
